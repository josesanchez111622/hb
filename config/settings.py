"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 3.1.13.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import io
import os

import sys
import environ
from google.cloud import secretmanager
from google.oauth2 import service_account
import mimetypes
from datetime import timedelta

mimetypes.add_type("text/css", ".css", True)

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = PROJECT_DIR

env_file = os.path.join(BASE_DIR, ".env")

is_in_cloud_rn = os.getenv("GAE_APPLICATION", None) is not None

if os.path.isfile(env_file):
    # Use a local secret file, if provided

    env.read_env(env_file)
elif os.environ.get("GOOGLE_CLOUD_PROJECT", None):
    # Pull secrets from Secret Manager
    print("pulling settings from GCP Secret Manager")
    project_id = os.environ.get("GOOGLE_CLOUD_PROJECT")

    client = secretmanager.SecretManagerServiceClient()
    settings_name = os.environ.get("SETTINGS_NAME", "django_settings")
    name = f"projects/{project_id}/secrets/{settings_name}/versions/latest"
    payload = client.access_secret_version(
        name=name).payload.data.decode("UTF-8")
    env.read_env(io.StringIO(payload))
else:
    raise Exception(
        "No local .env or GOOGLE_CLOUD_PROJECT detected. No secrets found.")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env(
    "SECRET_KEY", default="48w@oa-v1oqtnl$52-bkic=6rczatbh6t)48n4&u&pw-ljk$_h"
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

GS_CREDENTIALS_PATH = env("GS_CREDENTIALS_PATH")

if "test" in sys.argv:
    # store files in memory, no cleanup after tests are finished
    DEFAULT_FILE_STORAGE = "inmemorystorage.InMemoryStorage"
    GCS_PRODUCT_IMAGE = "inmemorystorage.InMemoryStorage"
    USE_TZ = False
else:
    # Google Cloud Storage
    DEFAULT_FILE_STORAGE = "storages.backends.gcloud.GoogleCloudStorage"
    GS_BUCKET_NAME = env("GS_BUCKET_NAME").replace("gs://", "")
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
        GS_CREDENTIALS_PATH
    )

    # Google Cloud Storage For Product Image
    GCS_PRODUCT_IMAGE = env("GCS_PRODUCT_IMAGE_PATH")
    USE_TZ = True

ALLOWED_HOSTS = ["*"]

ASGI_APPLICATION = "config.asgi.application"

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    # 3rd party
    "channels",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.google",
    "simple_history",
    "widget_tweaks",
    "import_export",
    "compat",
    "tz_detect",
    "rest_framework",
    "corsheaders",
    # "django_slack",
    # local
    "accounts",
    "app",
    "booking",
    'pro',
    "backend.core",
    "rest_framework_simplejwt",
    'ckeditor',
]

MIDDLEWARE = [
    # "request_logging.middleware.LoggingMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "simple_history.middleware.HistoryRequestMiddleware",
    "tz_detect.middleware.TimezoneMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

if DEBUG:
    INSTALLED_APPS = [
        "django_extensions",
        "debug_toolbar",
    ] + INSTALLED_APPS

    MIDDLEWARE = [
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ] + MIDDLEWARE

# if not is_in_cloud_rn:
#     MIDDLEWARE += ["kolo.middleware.KoloMiddleware"]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "build"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "[%(asctime)s] %(levelname)s\t%(name)s@%(funcName)s:%(lineno)s- %(message)s",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": env("LOG_LEVEL", default="ERROR"),  # DEBUG, INFO, WARNING, ERROR, CRITICAL
    },
    "loggers": {
        "django.db.backends": {
            "level": "WARNING",
        },
        "django.request": {
            "level": "ERROR",
        },
        "asyncio": {
            "level": "WARNING",
        },
        "faker": {
            "level": "WARNING",
        },
        "factory": {
            "level": "WARNING",
        },
        "twilio.http_client": {
            "level": "WARNING",
        },
    },
}


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

if is_in_cloud_rn or os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None):
    DATABASES = {"default": env.db()}
else:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql_psycopg2",
            "NAME": "hb",
            "USER": "hb",
            "PASSWORD": "hb",
            "HOST": env("DB_HOST", default="localhost"),
            "PORT": "5432",
            "TEST": {
                "NAME": "test_hb",
            },
        }
    }

# If the flag as been set, configure to use proxy
if os.getenv("USE_CLOUD_SQL_AUTH_PROXY", None):
    DATABASES["default"]["HOST"] = "127.0.0.1"
    DATABASES["default"]["PORT"] = 5432


# if is_in_cloud_rn:
#     CACHES = {
#         "default": {
#             "BACKEND": "django.core.cache.backends.memcached.PyMemcacheCache",
#             "LOCATION": "redis://10.179.50.68:6379/1",
#             "OPTIONS": {
#                 "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             },
#         }
#     }
# else:
#     CACHES = {
#         "default": {
#             "BACKEND": "django_redis.cache.RedisCache",
#             "LOCATION": "redis://127.0.0.1:6379/1",
#             "OPTIONS": {
#                 "CLIENT_CLASS": "django_redis.client.DefaultClient",
#             },
#         }
#     }


# SESSION_ENGINE = "django.contrib.sessions.backends.cache"
# SESSION_CACHE_ALIAS = "default"


# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

# Allauth
# https://django-allauth.readthedocs.io/en/latest/configuration.html
AUTH_USER_MODEL = "accounts.CustomUser"
AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    "django.contrib.auth.backends.ModelBackend",
    # `allauth` specific authentication methods, such as login by e-mail
    "allauth.account.auth_backends.AuthenticationBackend",
)

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=60),
}


SOCIALACCOUNT_PROVIDERS = {
    "google": {
        "SCOPE": [
            "profile",
            "email",
        ],
        "AUTH_PARAMS": {
            "access_type": "online",
        },
    }
}


SITE_ID = 1
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_AUTHENTICATION_METHOD = "email"
ACCOUNT_UNIQUE_EMAIL = True
SOCIALACCOUNT_QUERY_EMAIL = True
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_PRESERVE_USERNAME_CASING = False

LOGIN_URL = "/app/accounts/login/"
LOGIN_REDIRECT_URL = "/app/hb/home/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/app/"

# Email
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
STATICFILES_FINDERS = [
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
]

STATIC_URL = "/static/"

STATIC_ROOT = "staticfiles"

STATICFILES_DIRS = []

STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"


INTERNAL_IPS = ["127.0.0.1",]
if DEBUG:
   import socket
   hostname, _, ips =socket.gethostbyname_ex(socket.gethostname())
   INTERNAL_IPS += [ip[:-1] + '1' for ip in ips]

# CORS_ALLOWED_ORIGINS = [
#     "https://www.homebreeze.com",
#     "https://homebreeze.com",
#     "https://kevin-dot-fluent-spring-330321.uc.r.appspot.com",
#     "https://fluent-spring-330321.uc.r.appspot.com",
#     "http://localhost:8080",
# ]
CSRF_TRUSTED_ORIGINS = [
    "www.homebreeze.com",
    "homebreeze.com",
    "kevin-dot-fluent-spring-330321.uc.r.appspot.com",
    "fluent-spring-330321.uc.r.appspot.com",
    "localhost",
    "https://www.homebreeze.com",
    "https://homebreeze.com",
]
CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_HEADERS = ["*"]
# CORS_REPLACE_HTTPS_REFERER = True

# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^https://\w+\.homebreeze\.com$",
# ]
# CORS_ORIGIN_WHITELIST = (
#     "https://www.homebreeze.com",
#     "https://kevin-dot-fluent-spring-330321.uc.r.appspot.com",
#     "https://fluent-spring-330321.uc.r.appspot.com",
#     "http://localhost:8080",
# )


# Test
TEST_PW = "12qwaszxW"

# Google Sheet
GSHEET_ID = "1CAazzupot-1neBTip1P6krD6v7PdThB9H8_WiZnWBd8"
G_JOBTYPES_SHEET_ID = "1yXoL_k-IpbTVtDjdz-bMBHVYGmCU3uw3kECmkvrSDqM"
G_PRODUCT_CATALOG_SHEET_ID = "1nfCT-xEXJYAc8wXecUIcqRhC4UM50J1AIK3_jLphZWg"

# Google Storage
GCP_BASE_URL = env("REACT_APP_GCS_BASE_URL")

# Sendgrid
EMAIL_BACKEND = "sgbackend.SendGridBackend"
SENDGRID_API_KEY = env("SENDGRID_API")
DEFAULT_FROM_EMAIL = "no-reply@homebreeze.com"
DEFAULT_FROM_DOMAIN = "HomeBreeze.com"

MAX_UPLOAD_SIZE = 50242880
DATA_UPLOAD_MAX_MEMORY_SIZE = 50242880

# Calendly
CALENDLY_API_KEY = env("CALENDLY_API_KEY")

# Twilio
TWILIO_ACCOUNT_SID = env("TWILIO_ACCOUNT_SID")
TWILIO_ACCOUNT_TOKEN = env("TWILIO_ACCOUNT_TOKEN")
TWILIO_ACCOUNT_NUMBER = env("TWILIO_ACCOUNT_NUMBER")

# Segment
SEGMENT_WRITE_KEY = env("REACT_APP_SEGMENT_WRITE_KEY")

# Slack Notification
# SLACK_TOKEN = env("SLACK_TOKEN")
# SLACK_CHANNEL = "#boom"
SLACK_CUSTOMER_AND_JOBS_WEBHOOK = env("SLACK_CUSTOMER_AND_JOBS_WEBHOOK")
SLACK_BOOM = env("SLACK_BOOM")

# Typeform
TANK_TYPEFORM_ID = env("TANK_TYPEFORM_ID")
TANKLESS_TYPEFORM_ID = env("TANKLESS_TYPEFORM_ID")

ADMIN_URL = env("ADMIN_URL")

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source']
        ]
    }
}
